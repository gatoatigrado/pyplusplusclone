# This file has been generated by Py++.

import ctypes

import ctypes_utils

libmemcached_lib = ctypes.CDLL( r"/home/roman/language-binding/sources/pyplusplus_dev/examples/libmemcached_dev/libmemcached-0.31/libmemcached/.libs/libmemcached.so" )

libmemcached_lib.undecorated_names = {#mapping between decorated and undecorated names
    "extern memcached_return memcached_decrement(memcached_st * ptr, char const * key, size_t key_length, uint32_t offset, uint64_t * value) [free function]" : "memcached_decrement", 
    "extern memcached_return memcached_string_reset(memcached_string_st * string) [free function]" : "memcached_string_reset", 
    "extern uint32_t memcached_generate_hash_value(char const * key, size_t key_length, memcached_hash hash_algorithm) [free function]" : "memcached_generate_hash_value", 
    "extern memcached_return memcached_decrement_with_initial(memcached_st * ptr, char const * key, size_t key_length, uint64_t offset, uint64_t initial, time_t expiration, uint64_t * value) [free function]" : "memcached_decrement_with_initial", 
    "extern char * * memcached_stat_get_keys(memcached_st * ptr, memcached_stat_st * stat, memcached_return * error) [free function]" : "memcached_stat_get_keys", 
    "extern memcached_return memcached_append(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_append", 
    "extern memcached_return memcached_server_add_with_weight(memcached_st * ptr, char const * hostname, unsigned int port, uint32_t weight) [free function]" : "memcached_server_add_with_weight", 
    "extern memcached_return memcached_dump(memcached_st * ptr, memcached_dump_func * function, void * context, uint32_t number_of_callbacks) [free function]" : "memcached_dump", 
    "extern memcached_return memcached_server_push(memcached_st * ptr, memcached_server_st * list) [free function]" : "memcached_server_push", 
    "extern memcached_return memcached_result_set_value(memcached_result_st * ptr, char * value, size_t length) [free function]" : "memcached_result_set_value", 
    "extern memcached_return memcached_replace_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_replace_by_key", 
    "extern memcached_return memcached_server_add_udp(memcached_st * ptr, char const * hostname, unsigned int port) [free function]" : "memcached_server_add_udp", 
    "extern memcached_server_st * memcached_servers_parse(char const * server_strings) [free function]" : "memcached_servers_parse", 
    "extern memcached_return memcached_set_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_set_by_key", 
    "extern uint64_t memcached_behavior_get(memcached_st * ptr, memcached_behavior flag) [free function]" : "memcached_behavior_get", 
    "extern char * memcached_fetch(memcached_st * ptr, char * key, size_t * key_length, size_t * value_length, uint32_t * flags, memcached_return * error) [free function]" : "memcached_fetch", 
    "extern memcached_st * memcached_create(memcached_st * ptr) [free function]" : "memcached_create", 
    "extern memcached_return memcached_replace(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_replace", 
    "extern memcached_return memcached_callback_set(memcached_st * ptr, memcached_callback flag, void * data) [free function]" : "memcached_callback_set", 
    "extern char * memcached_result_value(memcached_result_st * ptr) [free function]" : "memcached_result_value", 
    "extern void memcached_result_free(memcached_result_st * result) [free function]" : "memcached_result_free", 
    "extern memcached_server_st * memcached_server_create_with(memcached_st * memc, memcached_server_st * host, char const * hostname, unsigned int port, uint32_t weight, memcached_connection type) [free function]" : "memcached_server_create_with", 
    "extern memcached_return memcached_verbosity(memcached_st * ptr, unsigned int verbosity) [free function]" : "memcached_verbosity", 
    "extern void memcached_free(memcached_st * ptr) [free function]" : "memcached_free", 
    "extern memcached_return memcached_mget_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char * * keys, size_t * key_length, unsigned int number_of_keys) [free function]" : "memcached_mget_by_key", 
    "extern memcached_return memcached_version(memcached_st * ptr) [free function]" : "memcached_version", 
    "extern void memcached_result_reset(memcached_result_st * ptr) [free function]" : "memcached_result_reset", 
    "extern void memcached_quit(memcached_st * ptr) [free function]" : "memcached_quit", 
    "extern memcached_analysis_st * memcached_analyze(memcached_st * memc, memcached_stat_st * stat, memcached_return * error) [free function]" : "memcached_analyze", 
    "extern memcached_return memcached_fetch_execute(memcached_st * ptr, memcached_execute_function * callback, void * context, unsigned int number_of_callbacks) [free function]" : "memcached_fetch_execute", 
    "extern memcached_return memcached_prepend_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_prepend_by_key", 
    "extern char const * memcached_lib_version() [free function]" : "memcached_lib_version", 
    "extern memcached_return memcached_server_remove(memcached_server_st * st_ptr) [free function]" : "memcached_server_remove", 
    "extern memcached_return memcached_delete_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, time_t expiration) [free function]" : "memcached_delete_by_key", 
    "extern uint32_t memcached_generate_hash(memcached_st * ptr, char const * key, size_t key_length) [free function]" : "memcached_generate_hash", 
    "extern memcached_return memcached_set_memory_allocators(memcached_st * ptr, memcached_malloc_function mem_malloc, memcached_free_function mem_free, memcached_realloc_function mem_realloc, memcached_calloc_function mem_calloc) [free function]" : "memcached_set_memory_allocators", 
    "extern memcached_return memcached_prepend(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_prepend", 
    "extern void memcached_server_list_free(memcached_server_st * ptr) [free function]" : "memcached_server_list_free", 
    "extern memcached_return memcached_add(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_add", 
    "extern memcached_return memcached_flush(memcached_st * ptr, time_t expiration) [free function]" : "memcached_flush", 
    "extern memcached_return memcached_string_append_character(memcached_string_st * string, char character) [free function]" : "memcached_string_append_character", 
    "extern memcached_st * memcached_clone(memcached_st * clone, memcached_st * ptr) [free function]" : "memcached_clone", 
    "extern memcached_return memcached_server_add_udp_with_weight(memcached_st * ptr, char const * hostname, unsigned int port, uint32_t weight) [free function]" : "memcached_server_add_udp_with_weight", 
    "extern char * memcached_string_c_copy(memcached_string_st * string) [free function]" : "memcached_string_c_copy", 
    "extern memcached_return memcached_string_append(memcached_string_st * string, char * value, size_t length) [free function]" : "memcached_string_append", 
    "extern memcached_stat_st * memcached_stat(memcached_st * ptr, char * args, memcached_return * error) [free function]" : "memcached_stat", 
    "extern char * memcached_get(memcached_st * ptr, char const * key, size_t key_length, size_t * value_length, uint32_t * flags, memcached_return * error) [free function]" : "memcached_get", 
    "extern memcached_server_st * memcached_server_list_append(memcached_server_st * ptr, char const * hostname, unsigned int port, memcached_return * error) [free function]" : "memcached_server_list_append", 
    "extern memcached_return memcached_server_cursor(memcached_st * ptr, memcached_server_function * callback, void * context, unsigned int number_of_callbacks) [free function]" : "memcached_server_cursor", 
    "extern memcached_server_st * memcached_server_clone(memcached_server_st * clone, memcached_server_st * ptr) [free function]" : "memcached_server_clone", 
    "extern memcached_result_st * memcached_result_create(memcached_st * ptr, memcached_result_st * result) [free function]" : "memcached_result_create", 
    "extern memcached_server_st * memcached_server_list_append_with_weight(memcached_server_st * ptr, char const * hostname, unsigned int port, uint32_t weight, memcached_return * error) [free function]" : "memcached_server_list_append_with_weight", 
    "extern memcached_return memcached_set(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_set", 
    "extern void memcached_server_free(memcached_server_st * ptr) [free function]" : "memcached_server_free", 
    "extern void memcached_stat_free(memcached_st * arg0, memcached_stat_st * arg1) [free function]" : "memcached_stat_free", 
    "extern memcached_return memcached_cas_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags, uint64_t cas) [free function]" : "memcached_cas_by_key", 
    "extern memcached_return memcached_cas(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags, uint64_t cas) [free function]" : "memcached_cas", 
    "extern memcached_return memcached_server_add(memcached_st * ptr, char const * hostname, unsigned int port) [free function]" : "memcached_server_add", 
    "extern memcached_return memcached_stat_servername(memcached_stat_st * stat, char * args, char * hostname, unsigned int port) [free function]" : "memcached_stat_servername", 
    "extern memcached_return memcached_add_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_add_by_key", 
    "extern void * memcached_callback_get(memcached_st * ptr, memcached_callback flag, memcached_return * error) [free function]" : "memcached_callback_get", 
    "extern memcached_string_st * memcached_string_create(memcached_st * ptr, memcached_string_st * string, size_t initial_size) [free function]" : "memcached_string_create", 
    "extern memcached_return memcached_server_add_unix_socket_with_weight(memcached_st * ptr, char const * filename, uint32_t weight) [free function]" : "memcached_server_add_unix_socket_with_weight", 
    "extern char * memcached_get_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, size_t * value_length, uint32_t * flags, memcached_return * error) [free function]" : "memcached_get_by_key", 
    "extern memcached_return memcached_server_add_unix_socket(memcached_st * ptr, char const * filename) [free function]" : "memcached_server_add_unix_socket", 
    "extern memcached_server_st * memcached_server_by_key(memcached_st * ptr, char const * key, size_t key_length, memcached_return * error) [free function]" : "memcached_server_by_key", 
    "extern memcached_return memcached_flush_buffers(memcached_st * mem) [free function]" : "memcached_flush_buffers", 
    "extern void memcached_get_memory_allocators(memcached_st * ptr, memcached_malloc_function * mem_malloc, memcached_free_function * mem_free, memcached_realloc_function * mem_realloc, memcached_calloc_function * mem_calloc) [free function]" : "memcached_get_memory_allocators", 
    "extern memcached_return memcached_delete(memcached_st * ptr, char const * key, size_t key_length, time_t expiration) [free function]" : "memcached_delete", 
    "extern void * memcached_set_user_data(memcached_st * ptr, void * data) [free function]" : "memcached_set_user_data", 
    "extern memcached_return memcached_increment(memcached_st * ptr, char const * key, size_t key_length, uint32_t offset, uint64_t * value) [free function]" : "memcached_increment", 
    "extern memcached_return run_distribution(memcached_st * ptr) [free function]" : "run_distribution", 
    "extern void memcached_string_free(memcached_string_st * string) [free function]" : "memcached_string_free", 
    "extern memcached_return memcached_append_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]" : "memcached_append_by_key", 
    "extern memcached_return memcached_string_check(memcached_string_st * string, size_t need) [free function]" : "memcached_string_check", 
    "extern memcached_return memcached_behavior_set(memcached_st * ptr, memcached_behavior flag, uint64_t data) [free function]" : "memcached_behavior_set", 
    "extern unsigned int memcached_server_list_count(memcached_server_st * ptr) [free function]" : "memcached_server_list_count", 
    "extern memcached_return memcached_mget(memcached_st * ptr, char * * keys, size_t * key_length, unsigned int number_of_keys) [free function]" : "memcached_mget", 
    "extern void * memcached_get_user_data(memcached_st * ptr) [free function]" : "memcached_get_user_data", 
    "extern memcached_return memcached_increment_with_initial(memcached_st * ptr, char const * key, size_t key_length, uint64_t offset, uint64_t initial, time_t expiration, uint64_t * value) [free function]" : "memcached_increment_with_initial", 
    "extern char * memcached_stat_get_value(memcached_st * ptr, memcached_stat_st * stat, char const * key, memcached_return * error) [free function]" : "memcached_stat_get_value", 
    "extern memcached_result_st * memcached_fetch_result(memcached_st * ptr, memcached_result_st * result, memcached_return * error) [free function]" : "memcached_fetch_result", 
    "extern memcached_server_st * memcached_server_create(memcached_st * memc, memcached_server_st * ptr) [free function]" : "memcached_server_create", 
    "extern size_t memcached_result_length(memcached_result_st * ptr) [free function]" : "memcached_result_length", 
    "extern char * memcached_strerror(memcached_st * ptr, memcached_return rc) [free function]" : "memcached_strerror", 
    "memcached_decrement" : "extern memcached_return memcached_decrement(memcached_st * ptr, char const * key, size_t key_length, uint32_t offset, uint64_t * value) [free function]", 
    "memcached_string_reset" : "extern memcached_return memcached_string_reset(memcached_string_st * string) [free function]", 
    "memcached_generate_hash_value" : "extern uint32_t memcached_generate_hash_value(char const * key, size_t key_length, memcached_hash hash_algorithm) [free function]", 
    "memcached_decrement_with_initial" : "extern memcached_return memcached_decrement_with_initial(memcached_st * ptr, char const * key, size_t key_length, uint64_t offset, uint64_t initial, time_t expiration, uint64_t * value) [free function]", 
    "memcached_stat_get_keys" : "extern char * * memcached_stat_get_keys(memcached_st * ptr, memcached_stat_st * stat, memcached_return * error) [free function]", 
    "memcached_append" : "extern memcached_return memcached_append(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_server_add_with_weight" : "extern memcached_return memcached_server_add_with_weight(memcached_st * ptr, char const * hostname, unsigned int port, uint32_t weight) [free function]", 
    "memcached_dump" : "extern memcached_return memcached_dump(memcached_st * ptr, memcached_dump_func * function, void * context, uint32_t number_of_callbacks) [free function]", 
    "memcached_server_push" : "extern memcached_return memcached_server_push(memcached_st * ptr, memcached_server_st * list) [free function]", 
    "memcached_result_set_value" : "extern memcached_return memcached_result_set_value(memcached_result_st * ptr, char * value, size_t length) [free function]", 
    "memcached_replace_by_key" : "extern memcached_return memcached_replace_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_server_add_udp" : "extern memcached_return memcached_server_add_udp(memcached_st * ptr, char const * hostname, unsigned int port) [free function]", 
    "memcached_servers_parse" : "extern memcached_server_st * memcached_servers_parse(char const * server_strings) [free function]", 
    "memcached_set_by_key" : "extern memcached_return memcached_set_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_behavior_get" : "extern uint64_t memcached_behavior_get(memcached_st * ptr, memcached_behavior flag) [free function]", 
    "memcached_fetch" : "extern char * memcached_fetch(memcached_st * ptr, char * key, size_t * key_length, size_t * value_length, uint32_t * flags, memcached_return * error) [free function]", 
    "memcached_create" : "extern memcached_st * memcached_create(memcached_st * ptr) [free function]", 
    "memcached_replace" : "extern memcached_return memcached_replace(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_callback_set" : "extern memcached_return memcached_callback_set(memcached_st * ptr, memcached_callback flag, void * data) [free function]", 
    "memcached_result_value" : "extern char * memcached_result_value(memcached_result_st * ptr) [free function]", 
    "memcached_result_free" : "extern void memcached_result_free(memcached_result_st * result) [free function]", 
    "memcached_server_create_with" : "extern memcached_server_st * memcached_server_create_with(memcached_st * memc, memcached_server_st * host, char const * hostname, unsigned int port, uint32_t weight, memcached_connection type) [free function]", 
    "memcached_verbosity" : "extern memcached_return memcached_verbosity(memcached_st * ptr, unsigned int verbosity) [free function]", 
    "memcached_free" : "extern void memcached_free(memcached_st * ptr) [free function]", 
    "memcached_mget_by_key" : "extern memcached_return memcached_mget_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char * * keys, size_t * key_length, unsigned int number_of_keys) [free function]", 
    "memcached_version" : "extern memcached_return memcached_version(memcached_st * ptr) [free function]", 
    "memcached_result_reset" : "extern void memcached_result_reset(memcached_result_st * ptr) [free function]", 
    "memcached_quit" : "extern void memcached_quit(memcached_st * ptr) [free function]", 
    "memcached_analyze" : "extern memcached_analysis_st * memcached_analyze(memcached_st * memc, memcached_stat_st * stat, memcached_return * error) [free function]", 
    "memcached_fetch_execute" : "extern memcached_return memcached_fetch_execute(memcached_st * ptr, memcached_execute_function * callback, void * context, unsigned int number_of_callbacks) [free function]", 
    "memcached_prepend_by_key" : "extern memcached_return memcached_prepend_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_lib_version" : "extern char const * memcached_lib_version() [free function]", 
    "memcached_server_remove" : "extern memcached_return memcached_server_remove(memcached_server_st * st_ptr) [free function]", 
    "memcached_delete_by_key" : "extern memcached_return memcached_delete_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, time_t expiration) [free function]", 
    "memcached_generate_hash" : "extern uint32_t memcached_generate_hash(memcached_st * ptr, char const * key, size_t key_length) [free function]", 
    "memcached_set_memory_allocators" : "extern memcached_return memcached_set_memory_allocators(memcached_st * ptr, memcached_malloc_function mem_malloc, memcached_free_function mem_free, memcached_realloc_function mem_realloc, memcached_calloc_function mem_calloc) [free function]", 
    "memcached_prepend" : "extern memcached_return memcached_prepend(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_server_list_free" : "extern void memcached_server_list_free(memcached_server_st * ptr) [free function]", 
    "memcached_add" : "extern memcached_return memcached_add(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_flush" : "extern memcached_return memcached_flush(memcached_st * ptr, time_t expiration) [free function]", 
    "memcached_string_append_character" : "extern memcached_return memcached_string_append_character(memcached_string_st * string, char character) [free function]", 
    "memcached_clone" : "extern memcached_st * memcached_clone(memcached_st * clone, memcached_st * ptr) [free function]", 
    "memcached_server_add_udp_with_weight" : "extern memcached_return memcached_server_add_udp_with_weight(memcached_st * ptr, char const * hostname, unsigned int port, uint32_t weight) [free function]", 
    "memcached_string_c_copy" : "extern char * memcached_string_c_copy(memcached_string_st * string) [free function]", 
    "memcached_string_append" : "extern memcached_return memcached_string_append(memcached_string_st * string, char * value, size_t length) [free function]", 
    "memcached_stat" : "extern memcached_stat_st * memcached_stat(memcached_st * ptr, char * args, memcached_return * error) [free function]", 
    "memcached_get" : "extern char * memcached_get(memcached_st * ptr, char const * key, size_t key_length, size_t * value_length, uint32_t * flags, memcached_return * error) [free function]", 
    "memcached_server_list_append" : "extern memcached_server_st * memcached_server_list_append(memcached_server_st * ptr, char const * hostname, unsigned int port, memcached_return * error) [free function]", 
    "memcached_server_cursor" : "extern memcached_return memcached_server_cursor(memcached_st * ptr, memcached_server_function * callback, void * context, unsigned int number_of_callbacks) [free function]", 
    "memcached_server_clone" : "extern memcached_server_st * memcached_server_clone(memcached_server_st * clone, memcached_server_st * ptr) [free function]", 
    "memcached_result_create" : "extern memcached_result_st * memcached_result_create(memcached_st * ptr, memcached_result_st * result) [free function]", 
    "memcached_server_list_append_with_weight" : "extern memcached_server_st * memcached_server_list_append_with_weight(memcached_server_st * ptr, char const * hostname, unsigned int port, uint32_t weight, memcached_return * error) [free function]", 
    "memcached_set" : "extern memcached_return memcached_set(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_server_free" : "extern void memcached_server_free(memcached_server_st * ptr) [free function]", 
    "memcached_stat_free" : "extern void memcached_stat_free(memcached_st * arg0, memcached_stat_st * arg1) [free function]", 
    "memcached_cas_by_key" : "extern memcached_return memcached_cas_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags, uint64_t cas) [free function]", 
    "memcached_cas" : "extern memcached_return memcached_cas(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags, uint64_t cas) [free function]", 
    "memcached_server_add" : "extern memcached_return memcached_server_add(memcached_st * ptr, char const * hostname, unsigned int port) [free function]", 
    "memcached_stat_servername" : "extern memcached_return memcached_stat_servername(memcached_stat_st * stat, char * args, char * hostname, unsigned int port) [free function]", 
    "memcached_add_by_key" : "extern memcached_return memcached_add_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_callback_get" : "extern void * memcached_callback_get(memcached_st * ptr, memcached_callback flag, memcached_return * error) [free function]", 
    "memcached_string_create" : "extern memcached_string_st * memcached_string_create(memcached_st * ptr, memcached_string_st * string, size_t initial_size) [free function]", 
    "memcached_server_add_unix_socket_with_weight" : "extern memcached_return memcached_server_add_unix_socket_with_weight(memcached_st * ptr, char const * filename, uint32_t weight) [free function]", 
    "memcached_get_by_key" : "extern char * memcached_get_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, size_t * value_length, uint32_t * flags, memcached_return * error) [free function]", 
    "memcached_server_add_unix_socket" : "extern memcached_return memcached_server_add_unix_socket(memcached_st * ptr, char const * filename) [free function]", 
    "memcached_server_by_key" : "extern memcached_server_st * memcached_server_by_key(memcached_st * ptr, char const * key, size_t key_length, memcached_return * error) [free function]", 
    "memcached_flush_buffers" : "extern memcached_return memcached_flush_buffers(memcached_st * mem) [free function]", 
    "memcached_get_memory_allocators" : "extern void memcached_get_memory_allocators(memcached_st * ptr, memcached_malloc_function * mem_malloc, memcached_free_function * mem_free, memcached_realloc_function * mem_realloc, memcached_calloc_function * mem_calloc) [free function]", 
    "memcached_delete" : "extern memcached_return memcached_delete(memcached_st * ptr, char const * key, size_t key_length, time_t expiration) [free function]", 
    "memcached_set_user_data" : "extern void * memcached_set_user_data(memcached_st * ptr, void * data) [free function]", 
    "memcached_increment" : "extern memcached_return memcached_increment(memcached_st * ptr, char const * key, size_t key_length, uint32_t offset, uint64_t * value) [free function]", 
    "run_distribution" : "extern memcached_return run_distribution(memcached_st * ptr) [free function]", 
    "memcached_string_free" : "extern void memcached_string_free(memcached_string_st * string) [free function]", 
    "memcached_append_by_key" : "extern memcached_return memcached_append_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]", 
    "memcached_string_check" : "extern memcached_return memcached_string_check(memcached_string_st * string, size_t need) [free function]", 
    "memcached_behavior_set" : "extern memcached_return memcached_behavior_set(memcached_st * ptr, memcached_behavior flag, uint64_t data) [free function]", 
    "memcached_server_list_count" : "extern unsigned int memcached_server_list_count(memcached_server_st * ptr) [free function]", 
    "memcached_mget" : "extern memcached_return memcached_mget(memcached_st * ptr, char * * keys, size_t * key_length, unsigned int number_of_keys) [free function]", 
    "memcached_get_user_data" : "extern void * memcached_get_user_data(memcached_st * ptr) [free function]", 
    "memcached_increment_with_initial" : "extern memcached_return memcached_increment_with_initial(memcached_st * ptr, char const * key, size_t key_length, uint64_t offset, uint64_t initial, time_t expiration, uint64_t * value) [free function]", 
    "memcached_stat_get_value" : "extern char * memcached_stat_get_value(memcached_st * ptr, memcached_stat_st * stat, char const * key, memcached_return * error) [free function]", 
    "memcached_fetch_result" : "extern memcached_result_st * memcached_fetch_result(memcached_st * ptr, memcached_result_st * result, memcached_return * error) [free function]", 
    "memcached_server_create" : "extern memcached_server_st * memcached_server_create(memcached_st * memc, memcached_server_st * ptr) [free function]", 
    "memcached_result_length" : "extern size_t memcached_result_length(memcached_result_st * ptr) [free function]", 
    "memcached_strerror" : "extern char * memcached_strerror(memcached_st * ptr, memcached_return rc) [free function]", 
}

class memcached_hash( ctypes_utils.Enumeration ):
    MEMCACHED_HASH_DEFAULT = 0
    MEMCACHED_HASH_MD5 = 1
    MEMCACHED_HASH_CRC = 2
    MEMCACHED_HASH_FNV1_64 = 3
    MEMCACHED_HASH_FNV1A_64 = 4
    MEMCACHED_HASH_FNV1_32 = 5
    MEMCACHED_HASH_FNV1A_32 = 6
    MEMCACHED_HASH_HSIEH = 7
    MEMCACHED_HASH_MURMUR = 8
    MEMCACHED_HASH_JENKINS = 9

class memcached_behavior( ctypes_utils.Enumeration ):
    MEMCACHED_BEHAVIOR_NO_BLOCK = 0
    MEMCACHED_BEHAVIOR_TCP_NODELAY = 1
    MEMCACHED_BEHAVIOR_HASH = 2
    MEMCACHED_BEHAVIOR_KETAMA = 3
    MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE = 4
    MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE = 5
    MEMCACHED_BEHAVIOR_CACHE_LOOKUPS = 6
    MEMCACHED_BEHAVIOR_SUPPORT_CAS = 7
    MEMCACHED_BEHAVIOR_POLL_TIMEOUT = 8
    MEMCACHED_BEHAVIOR_DISTRIBUTION = 9
    MEMCACHED_BEHAVIOR_BUFFER_REQUESTS = 10
    MEMCACHED_BEHAVIOR_USER_DATA = 11
    MEMCACHED_BEHAVIOR_SORT_HOSTS = 12
    MEMCACHED_BEHAVIOR_VERIFY_KEY = 13
    MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT = 14
    MEMCACHED_BEHAVIOR_RETRY_TIMEOUT = 15
    MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED = 16
    MEMCACHED_BEHAVIOR_KETAMA_HASH = 17
    MEMCACHED_BEHAVIOR_BINARY_PROTOCOL = 18
    MEMCACHED_BEHAVIOR_SND_TIMEOUT = 19
    MEMCACHED_BEHAVIOR_RCV_TIMEOUT = 20
    MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT = 21
    MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK = 22
    MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK = 23
    MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH = 24
    MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY = 25
    MEMCACHED_BEHAVIOR_NOREPLY = 26
    MEMCACHED_BEHAVIOR_USE_UDP = 27
    MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS = 28
    MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS = 29

class memcached_callback( ctypes_utils.Enumeration ):
    MEMCACHED_CALLBACK_PREFIX_KEY = 0
    MEMCACHED_CALLBACK_USER_DATA = 1
    MEMCACHED_CALLBACK_CLEANUP_FUNCTION = 2
    MEMCACHED_CALLBACK_CLONE_FUNCTION = 3
    MEMCACHED_CALLBACK_GET_FAILURE = 7
    MEMCACHED_CALLBACK_DELETE_TRIGGER = 8

class memcached_return( ctypes_utils.Enumeration ):
    MEMCACHED_SUCCESS = 0
    MEMCACHED_FAILURE = 1
    MEMCACHED_HOST_LOOKUP_FAILURE = 2
    MEMCACHED_CONNECTION_FAILURE = 3
    MEMCACHED_CONNECTION_BIND_FAILURE = 4
    MEMCACHED_WRITE_FAILURE = 5
    MEMCACHED_READ_FAILURE = 6
    MEMCACHED_UNKNOWN_READ_FAILURE = 7
    MEMCACHED_PROTOCOL_ERROR = 8
    MEMCACHED_CLIENT_ERROR = 9
    MEMCACHED_SERVER_ERROR = 10
    MEMCACHED_CONNECTION_SOCKET_CREATE_FAILURE = 11
    MEMCACHED_DATA_EXISTS = 12
    MEMCACHED_DATA_DOES_NOT_EXIST = 13
    MEMCACHED_NOTSTORED = 14
    MEMCACHED_STORED = 15
    MEMCACHED_NOTFOUND = 16
    MEMCACHED_MEMORY_ALLOCATION_FAILURE = 17
    MEMCACHED_PARTIAL_READ = 18
    MEMCACHED_SOME_ERRORS = 19
    MEMCACHED_NO_SERVERS = 20
    MEMCACHED_END = 21
    MEMCACHED_DELETED = 22
    MEMCACHED_VALUE = 23
    MEMCACHED_STAT = 24
    MEMCACHED_ITEM = 25
    MEMCACHED_ERRNO = 26
    MEMCACHED_FAIL_UNIX_SOCKET = 27
    MEMCACHED_NOT_SUPPORTED = 28
    MEMCACHED_NO_KEY_PROVIDED = 29
    MEMCACHED_FETCH_NOTFINISHED = 30
    MEMCACHED_TIMEOUT = 31
    MEMCACHED_BUFFERED = 32
    MEMCACHED_BAD_KEY_PROVIDED = 33
    MEMCACHED_INVALID_HOST_PROTOCOL = 34
    MEMCACHED_SERVER_MARKED_DEAD = 35
    MEMCACHED_UNKNOWN_STAT_KEY = 36
    MEMCACHED_MAXIMUM_RETURN = 37

class memcached_connection( ctypes_utils.Enumeration ):
    MEMCACHED_CONNECTION_UNKNOWN = 0
    MEMCACHED_CONNECTION_TCP = 1
    MEMCACHED_CONNECTION_UDP = 2
    MEMCACHED_CONNECTION_UNIX_SOCKET = 3

class memcached_analysis_st(ctypes.Structure):
    """class memcached_analysis_st"""

class memcached_string_st(ctypes.Structure):
    """class memcached_string_st"""

class memcached_result_st(ctypes.Structure):
    """class memcached_result_st"""

class memcached_server_st(ctypes.Structure):
    """class memcached_server_st"""

class memcached_st(ctypes.Structure):
    """class memcached_st"""

class memcached_stat_st(ctypes.Structure):
    """class memcached_stat_st"""

class addrinfo(ctypes.Structure):
    """class declaration addrinfo"""
    _fields_  = []

class memcached_continuum_item_st(ctypes.Structure):
    """class declaration memcached_continuum_item_st"""
    _fields_  = []

memcached_analysis_st._fields_ = [ #class memcached_analysis_st
    ("average_item_size", ctypes.c_uint),
    ("longest_uptime", ctypes.c_uint),
    ("least_free_server", ctypes.c_uint),
    ("most_consumed_server", ctypes.c_uint),
    ("oldest_server", ctypes.c_uint),
    ("pool_hit_ratio", ctypes.c_double),
    ("most_used_bytes", ctypes.c_ulonglong),
    ("least_remaining_bytes", ctypes.c_ulonglong),
]

memcached_string_st._fields_ = [ #class memcached_string_st
    ("root", ctypes.POINTER( memcached_st )),
    ("end", ctypes.c_char_p),
    ("string", ctypes.c_char_p),
    ("current_size", ctypes.c_uint),
    ("block_size", ctypes.c_uint),
    ("is_allocated", ctypes.c_bool),
]

memcached_result_st._fields_ = [ #class memcached_result_st
    ("flags", ctypes.c_uint),
    ("is_allocated", ctypes.c_bool),
    ("expiration", ctypes.c_long),
    ("root", ctypes.POINTER( memcached_st )),
    ("key_length", ctypes.c_uint),
    ("cas", ctypes.c_ulonglong),
    ("value", memcached_string_st),
    ("key", ( ctypes.c_char * 251 )),
]

memcached_server_st._fields_ = [ #class memcached_server_st
    ("is_allocated", ctypes.c_bool),
    ("sockaddr_inited", ctypes.c_bool),
    ("count", ctypes.c_ushort),
    ("cursor_active", ctypes.c_uint),
    ("port", ctypes.c_uint),
    ("cached_errno", ctypes.c_int),
    ("fd", ctypes.c_int),
    ("io_bytes_sent", ctypes.c_uint),
    ("server_failure_counter", ctypes.c_uint),
    ("weight", ctypes.c_uint),
    ("major_version", ctypes.c_ubyte),
    ("micro_version", ctypes.c_ubyte),
    ("minor_version", ctypes.c_ubyte),
    ("type", memcached_connection),
    ("read_ptr", ctypes.c_char_p),
    ("read_buffer_length", ctypes.c_uint),
    ("read_data_length", ctypes.c_uint),
    ("write_buffer_offset", ctypes.c_uint),
    ("address_info", ctypes.POINTER( addrinfo )),
    ("next_retry", ctypes.c_long),
    ("root", ctypes.POINTER( memcached_st )),
    ("limit_maxbytes", ctypes.c_ulonglong),
    ("read_buffer", ( ctypes.c_char * 8196 )),
    ("write_buffer", ( ctypes.c_char * 8196 )),
    ("hostname", ( ctypes.c_char * 64 )),
]

memcached_st._fields_ = [ #class memcached_st
    ("purging", ctypes.c_ubyte),
    ("is_allocated", ctypes.c_bool),
    ("distribution", ctypes.c_ubyte),
    ("hash", ctypes.c_ubyte),
    ("continuum_points_counter", ctypes.c_uint),
    ("hosts", ctypes.POINTER( memcached_server_st )),
    ("snd_timeout", ctypes.c_int),
    ("rcv_timeout", ctypes.c_int),
    ("server_failure_limit", ctypes.c_uint),
    ("io_msg_watermark", ctypes.c_uint),
    ("io_bytes_watermark", ctypes.c_uint),
    ("io_key_prefetch", ctypes.c_uint),
    ("number_of_hosts", ctypes.c_uint),
    ("cursor_server", ctypes.c_uint),
    ("cached_errno", ctypes.c_int),
    ("flags", ctypes.c_uint),
    ("poll_timeout", ctypes.c_int),
    ("connect_timeout", ctypes.c_int),
    ("retry_timeout", ctypes.c_int),
    ("continuum_count", ctypes.c_uint),
    ("send_size", ctypes.c_int),
    ("recv_size", ctypes.c_int),
    ("user_data", ctypes.c_void_p),
    ("next_distribution_rebuild", ctypes.c_long),
    ("prefix_key_length", ctypes.c_uint),
    ("hash_continuum", memcached_hash),
    ("result", memcached_result_st),
    ("continuum", ctypes.POINTER( memcached_continuum_item_st )),
    ("on_clone", ctypes.POINTER( ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_st ) ) )),
    ("on_cleanup", ctypes.POINTER( ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ) ) )),
    ("call_free", ctypes.POINTER( ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_st ), ctypes.c_void_p ) )),
    ("call_malloc", ctypes.POINTER( ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_uint ) )),
    ("call_realloc", ctypes.POINTER( ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_void_p, ctypes.c_uint ) )),
    ("call_calloc", ctypes.POINTER( ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_uint, ctypes.c_uint ) )),
    ("get_key_failure", ctypes.POINTER( ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.POINTER( memcached_result_st ) ) )),
    ("delete_trigger", ctypes.POINTER( ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint ) )),
    ("prefix_key", ( ctypes.c_char * 128 )),
    ("number_of_replicas", ctypes.c_uint),
]

memcached_stat_st._fields_ = [ #class memcached_stat_st
    ("connection_structures", ctypes.c_uint),
    ("curr_connections", ctypes.c_uint),
    ("curr_items", ctypes.c_uint),
    ("pid", ctypes.c_uint),
    ("pointer_size", ctypes.c_uint),
    ("rusage_system_microseconds", ctypes.c_uint),
    ("rusage_system_seconds", ctypes.c_uint),
    ("rusage_user_microseconds", ctypes.c_uint),
    ("rusage_user_seconds", ctypes.c_uint),
    ("threads", ctypes.c_uint),
    ("time", ctypes.c_uint),
    ("total_connections", ctypes.c_uint),
    ("total_items", ctypes.c_uint),
    ("uptime", ctypes.c_uint),
    ("bytes", ctypes.c_ulonglong),
    ("bytes_read", ctypes.c_ulonglong),
    ("bytes_written", ctypes.c_ulonglong),
    ("cmd_get", ctypes.c_ulonglong),
    ("cmd_set", ctypes.c_ulonglong),
    ("evictions", ctypes.c_ulonglong),
    ("get_hits", ctypes.c_ulonglong),
    ("get_misses", ctypes.c_ulonglong),
    ("limit_maxbytes", ctypes.c_ulonglong),
    ("version", ( ctypes.c_char * 24 )),
]

memcached_delete_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_long  )
memcached_delete = memcached_delete_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_delete(memcached_st * ptr, char const * key, size_t key_length, time_t expiration) [free function]"], libmemcached_lib ) )

memcached_stat_get_value_type = ctypes.CFUNCTYPE( ctypes.c_char_p, ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_stat_st ), ctypes.c_char_p, ctypes.POINTER( memcached_return )  )
memcached_stat_get_value = memcached_stat_get_value_type( ( libmemcached_lib.undecorated_names["extern char * memcached_stat_get_value(memcached_st * ptr, memcached_stat_st * stat, char const * key, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_analyze_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_analysis_st ), ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_stat_st ), ctypes.POINTER( memcached_return )  )
memcached_analyze = memcached_analyze_type( ( libmemcached_lib.undecorated_names["extern memcached_analysis_st * memcached_analyze(memcached_st * memc, memcached_stat_st * stat, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_string_append_character_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_string_st ), ctypes.c_char  )
memcached_string_append_character = memcached_string_append_character_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_string_append_character(memcached_string_st * string, char character) [free function]"], libmemcached_lib ) )

memcached_dump_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.POINTER( ctypes.POINTER( ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_void_p ) ) ), ctypes.c_void_p, ctypes.c_uint  )
memcached_dump = memcached_dump_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_dump(memcached_st * ptr, memcached_dump_func * function, void * context, uint32_t number_of_callbacks) [free function]"], libmemcached_lib ) )

memcached_server_clone_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_server_st ), ctypes.POINTER( memcached_server_st ), ctypes.POINTER( memcached_server_st )  )
memcached_server_clone = memcached_server_clone_type( ( libmemcached_lib.undecorated_names["extern memcached_server_st * memcached_server_clone(memcached_server_st * clone, memcached_server_st * ptr) [free function]"], libmemcached_lib ) )

memcached_delete_by_key_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long  )
memcached_delete_by_key = memcached_delete_by_key_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_delete_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, time_t expiration) [free function]"], libmemcached_lib ) )

memcached_stat_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_stat_st ), ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.POINTER( memcached_return )  )
memcached_stat = memcached_stat_type( ( libmemcached_lib.undecorated_names["extern memcached_stat_st * memcached_stat(memcached_st * ptr, char * args, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_generate_hash_type = ctypes.CFUNCTYPE( ctypes.c_uint, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint  )
memcached_generate_hash = memcached_generate_hash_type( ( libmemcached_lib.undecorated_names["extern uint32_t memcached_generate_hash(memcached_st * ptr, char const * key, size_t key_length) [free function]"], libmemcached_lib ) )

memcached_result_length_type = ctypes.CFUNCTYPE( ctypes.c_uint, ctypes.POINTER( memcached_result_st )  )
memcached_result_length = memcached_result_length_type( ( libmemcached_lib.undecorated_names["extern size_t memcached_result_length(memcached_result_st * ptr) [free function]"], libmemcached_lib ) )

memcached_set_user_data_type = ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_void_p  )
memcached_set_user_data = memcached_set_user_data_type( ( libmemcached_lib.undecorated_names["extern void * memcached_set_user_data(memcached_st * ptr, void * data) [free function]"], libmemcached_lib ) )

memcached_flush_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_long  )
memcached_flush = memcached_flush_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_flush(memcached_st * ptr, time_t expiration) [free function]"], libmemcached_lib ) )

memcached_strerror_type = ctypes.CFUNCTYPE( ctypes.c_char_p, ctypes.POINTER( memcached_st ), memcached_return  )
memcached_strerror = memcached_strerror_type( ( libmemcached_lib.undecorated_names["extern char * memcached_strerror(memcached_st * ptr, memcached_return rc) [free function]"], libmemcached_lib ) )

memcached_cas_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint, ctypes.c_ulonglong  )
memcached_cas = memcached_cas_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_cas(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags, uint64_t cas) [free function]"], libmemcached_lib ) )

memcached_server_free_type = ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_server_st )  )
memcached_server_free = memcached_server_free_type( ( libmemcached_lib.undecorated_names["extern void memcached_server_free(memcached_server_st * ptr) [free function]"], libmemcached_lib ) )

memcached_behavior_set_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), memcached_behavior, ctypes.c_ulonglong  )
memcached_behavior_set = memcached_behavior_set_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_behavior_set(memcached_st * ptr, memcached_behavior flag, uint64_t data) [free function]"], libmemcached_lib ) )

memcached_get_type = ctypes.CFUNCTYPE( ctypes.c_char_p, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.POINTER( ctypes.c_uint ), ctypes.POINTER( ctypes.c_uint ), ctypes.POINTER( memcached_return )  )
memcached_get = memcached_get_type( ( libmemcached_lib.undecorated_names["extern char * memcached_get(memcached_st * ptr, char const * key, size_t key_length, size_t * value_length, uint32_t * flags, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_server_list_append_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_server_st ), ctypes.POINTER( memcached_server_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.POINTER( memcached_return )  )
memcached_server_list_append = memcached_server_list_append_type( ( libmemcached_lib.undecorated_names["extern memcached_server_st * memcached_server_list_append(memcached_server_st * ptr, char const * hostname, unsigned int port, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_set_memory_allocators_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.POINTER( ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_uint ) ), ctypes.POINTER( ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_st ), ctypes.c_void_p ) ), ctypes.POINTER( ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_void_p, ctypes.c_uint ) ), ctypes.POINTER( ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_uint, ctypes.c_uint ) )  )
memcached_set_memory_allocators = memcached_set_memory_allocators_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_set_memory_allocators(memcached_st * ptr, memcached_malloc_function mem_malloc, memcached_free_function mem_free, memcached_realloc_function mem_realloc, memcached_calloc_function mem_calloc) [free function]"], libmemcached_lib ) )

memcached_string_c_copy_type = ctypes.CFUNCTYPE( ctypes.c_char_p, ctypes.POINTER( memcached_string_st )  )
memcached_string_c_copy = memcached_string_c_copy_type( ( libmemcached_lib.undecorated_names["extern char * memcached_string_c_copy(memcached_string_st * string) [free function]"], libmemcached_lib ) )

memcached_generate_hash_value_type = ctypes.CFUNCTYPE( ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, memcached_hash  )
memcached_generate_hash_value = memcached_generate_hash_value_type( ( libmemcached_lib.undecorated_names["extern uint32_t memcached_generate_hash_value(char const * key, size_t key_length, memcached_hash hash_algorithm) [free function]"], libmemcached_lib ) )

memcached_server_by_key_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_server_st ), ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.POINTER( memcached_return )  )
memcached_server_by_key = memcached_server_by_key_type( ( libmemcached_lib.undecorated_names["extern memcached_server_st * memcached_server_by_key(memcached_st * ptr, char const * key, size_t key_length, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_set_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_set = memcached_set_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_set(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

memcached_fetch_type = ctypes.CFUNCTYPE( ctypes.c_char_p, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.POINTER( ctypes.c_uint ), ctypes.POINTER( ctypes.c_uint ), ctypes.POINTER( ctypes.c_uint ), ctypes.POINTER( memcached_return )  )
memcached_fetch = memcached_fetch_type( ( libmemcached_lib.undecorated_names["extern char * memcached_fetch(memcached_st * ptr, char * key, size_t * key_length, size_t * value_length, uint32_t * flags, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_flush_buffers_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st )  )
memcached_flush_buffers = memcached_flush_buffers_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_flush_buffers(memcached_st * mem) [free function]"], libmemcached_lib ) )

memcached_server_create_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_server_st ), ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_server_st )  )
memcached_server_create = memcached_server_create_type( ( libmemcached_lib.undecorated_names["extern memcached_server_st * memcached_server_create(memcached_st * memc, memcached_server_st * ptr) [free function]"], libmemcached_lib ) )

memcached_result_create_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_result_st ), ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_result_st )  )
memcached_result_create = memcached_result_create_type( ( libmemcached_lib.undecorated_names["extern memcached_result_st * memcached_result_create(memcached_st * ptr, memcached_result_st * result) [free function]"], libmemcached_lib ) )

memcached_cas_by_key_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint, ctypes.c_ulonglong  )
memcached_cas_by_key = memcached_cas_by_key_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_cas_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags, uint64_t cas) [free function]"], libmemcached_lib ) )

memcached_create_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_st )  )
memcached_create = memcached_create_type( ( libmemcached_lib.undecorated_names["extern memcached_st * memcached_create(memcached_st * ptr) [free function]"], libmemcached_lib ) )

memcached_set_by_key_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_set_by_key = memcached_set_by_key_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_set_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

memcached_behavior_get_type = ctypes.CFUNCTYPE( ctypes.c_ulonglong, ctypes.POINTER( memcached_st ), memcached_behavior  )
memcached_behavior_get = memcached_behavior_get_type( ( libmemcached_lib.undecorated_names["extern uint64_t memcached_behavior_get(memcached_st * ptr, memcached_behavior flag) [free function]"], libmemcached_lib ) )

memcached_mget_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.POINTER( ctypes.c_char_p ), ctypes.POINTER( ctypes.c_uint ), ctypes.c_uint  )
memcached_mget = memcached_mget_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_mget(memcached_st * ptr, char * * keys, size_t * key_length, unsigned int number_of_keys) [free function]"], libmemcached_lib ) )

memcached_server_add_unix_socket_with_weight_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint  )
memcached_server_add_unix_socket_with_weight = memcached_server_add_unix_socket_with_weight_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_server_add_unix_socket_with_weight(memcached_st * ptr, char const * filename, uint32_t weight) [free function]"], libmemcached_lib ) )

memcached_fetch_result_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_result_st ), ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_result_st ), ctypes.POINTER( memcached_return )  )
memcached_fetch_result = memcached_fetch_result_type( ( libmemcached_lib.undecorated_names["extern memcached_result_st * memcached_fetch_result(memcached_st * ptr, memcached_result_st * result, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_increment_with_initial_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_long, ctypes.POINTER( ctypes.c_ulonglong )  )
memcached_increment_with_initial = memcached_increment_with_initial_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_increment_with_initial(memcached_st * ptr, char const * key, size_t key_length, uint64_t offset, uint64_t initial, time_t expiration, uint64_t * value) [free function]"], libmemcached_lib ) )

memcached_mget_by_key_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.POINTER( ctypes.c_char_p ), ctypes.POINTER( ctypes.c_uint ), ctypes.c_uint  )
memcached_mget_by_key = memcached_mget_by_key_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_mget_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char * * keys, size_t * key_length, unsigned int number_of_keys) [free function]"], libmemcached_lib ) )

memcached_get_user_data_type = ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st )  )
memcached_get_user_data = memcached_get_user_data_type( ( libmemcached_lib.undecorated_names["extern void * memcached_get_user_data(memcached_st * ptr) [free function]"], libmemcached_lib ) )

memcached_result_value_type = ctypes.CFUNCTYPE( ctypes.c_char_p, ctypes.POINTER( memcached_result_st )  )
memcached_result_value = memcached_result_value_type( ( libmemcached_lib.undecorated_names["extern char * memcached_result_value(memcached_result_st * ptr) [free function]"], libmemcached_lib ) )

memcached_version_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st )  )
memcached_version = memcached_version_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_version(memcached_st * ptr) [free function]"], libmemcached_lib ) )

memcached_result_reset_type = ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_result_st )  )
memcached_result_reset = memcached_result_reset_type( ( libmemcached_lib.undecorated_names["extern void memcached_result_reset(memcached_result_st * ptr) [free function]"], libmemcached_lib ) )

memcached_add_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_add = memcached_add_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_add(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

memcached_string_append_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_string_st ), ctypes.c_char_p, ctypes.c_uint  )
memcached_string_append = memcached_string_append_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_string_append(memcached_string_st * string, char * value, size_t length) [free function]"], libmemcached_lib ) )

memcached_replace_by_key_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_replace_by_key = memcached_replace_by_key_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_replace_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

memcached_prepend_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_prepend = memcached_prepend_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_prepend(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

memcached_server_list_append_with_weight_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_server_st ), ctypes.POINTER( memcached_server_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_uint, ctypes.POINTER( memcached_return )  )
memcached_server_list_append_with_weight = memcached_server_list_append_with_weight_type( ( libmemcached_lib.undecorated_names["extern memcached_server_st * memcached_server_list_append_with_weight(memcached_server_st * ptr, char const * hostname, unsigned int port, uint32_t weight, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_verbosity_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_uint  )
memcached_verbosity = memcached_verbosity_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_verbosity(memcached_st * ptr, unsigned int verbosity) [free function]"], libmemcached_lib ) )

memcached_stat_servername_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_stat_st ), ctypes.c_char_p, ctypes.c_char_p, ctypes.c_uint  )
memcached_stat_servername = memcached_stat_servername_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_stat_servername(memcached_stat_st * stat, char * args, char * hostname, unsigned int port) [free function]"], libmemcached_lib ) )

memcached_server_create_with_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_server_st ), ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_server_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_uint, memcached_connection  )
memcached_server_create_with = memcached_server_create_with_type( ( libmemcached_lib.undecorated_names["extern memcached_server_st * memcached_server_create_with(memcached_st * memc, memcached_server_st * host, char const * hostname, unsigned int port, uint32_t weight, memcached_connection type) [free function]"], libmemcached_lib ) )

memcached_server_add_udp_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint  )
memcached_server_add_udp = memcached_server_add_udp_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_server_add_udp(memcached_st * ptr, char const * hostname, unsigned int port) [free function]"], libmemcached_lib ) )

memcached_decrement_with_initial_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_long, ctypes.POINTER( ctypes.c_ulonglong )  )
memcached_decrement_with_initial = memcached_decrement_with_initial_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_decrement_with_initial(memcached_st * ptr, char const * key, size_t key_length, uint64_t offset, uint64_t initial, time_t expiration, uint64_t * value) [free function]"], libmemcached_lib ) )

memcached_string_reset_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_string_st )  )
memcached_string_reset = memcached_string_reset_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_string_reset(memcached_string_st * string) [free function]"], libmemcached_lib ) )

memcached_server_cursor_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.POINTER( ctypes.POINTER( ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_server_st ), ctypes.c_void_p ) ) ), ctypes.c_void_p, ctypes.c_uint  )
memcached_server_cursor = memcached_server_cursor_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_server_cursor(memcached_st * ptr, memcached_server_function * callback, void * context, unsigned int number_of_callbacks) [free function]"], libmemcached_lib ) )

memcached_fetch_execute_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.POINTER( ctypes.POINTER( ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_result_st ), ctypes.c_void_p ) ) ), ctypes.c_void_p, ctypes.c_uint  )
memcached_fetch_execute = memcached_fetch_execute_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_fetch_execute(memcached_st * ptr, memcached_execute_function * callback, void * context, unsigned int number_of_callbacks) [free function]"], libmemcached_lib ) )

memcached_clone_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_st )  )
memcached_clone = memcached_clone_type( ( libmemcached_lib.undecorated_names["extern memcached_st * memcached_clone(memcached_st * clone, memcached_st * ptr) [free function]"], libmemcached_lib ) )

memcached_quit_type = ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_st )  )
memcached_quit = memcached_quit_type( ( libmemcached_lib.undecorated_names["extern void memcached_quit(memcached_st * ptr) [free function]"], libmemcached_lib ) )

memcached_string_create_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_string_st ), ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_string_st ), ctypes.c_uint  )
memcached_string_create = memcached_string_create_type( ( libmemcached_lib.undecorated_names["extern memcached_string_st * memcached_string_create(memcached_st * ptr, memcached_string_st * string, size_t initial_size) [free function]"], libmemcached_lib ) )

memcached_get_memory_allocators_type = ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_st ), ctypes.POINTER( ctypes.POINTER( ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_uint ) ) ), ctypes.POINTER( ctypes.POINTER( ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_st ), ctypes.c_void_p ) ) ), ctypes.POINTER( ctypes.POINTER( ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_void_p, ctypes.c_uint ) ) ), ctypes.POINTER( ctypes.POINTER( ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), ctypes.c_uint, ctypes.c_uint ) ) )  )
memcached_get_memory_allocators = memcached_get_memory_allocators_type( ( libmemcached_lib.undecorated_names["extern void memcached_get_memory_allocators(memcached_st * ptr, memcached_malloc_function * mem_malloc, memcached_free_function * mem_free, memcached_realloc_function * mem_realloc, memcached_calloc_function * mem_calloc) [free function]"], libmemcached_lib ) )

memcached_prepend_by_key_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_prepend_by_key = memcached_prepend_by_key_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_prepend_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

run_distribution_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st )  )
run_distribution = run_distribution_type( ( libmemcached_lib.undecorated_names["extern memcached_return run_distribution(memcached_st * ptr) [free function]"], libmemcached_lib ) )

memcached_server_list_free_type = ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_server_st )  )
memcached_server_list_free = memcached_server_list_free_type( ( libmemcached_lib.undecorated_names["extern void memcached_server_list_free(memcached_server_st * ptr) [free function]"], libmemcached_lib ) )

memcached_lib_version_type = ctypes.CFUNCTYPE( ctypes.c_char_p )
memcached_lib_version = memcached_lib_version_type( ( libmemcached_lib.undecorated_names["extern char const * memcached_lib_version() [free function]"], libmemcached_lib ) )

memcached_get_by_key_type = ctypes.CFUNCTYPE( ctypes.c_char_p, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.POINTER( ctypes.c_uint ), ctypes.POINTER( ctypes.c_uint ), ctypes.POINTER( memcached_return )  )
memcached_get_by_key = memcached_get_by_key_type( ( libmemcached_lib.undecorated_names["extern char * memcached_get_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, size_t * value_length, uint32_t * flags, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_server_add_with_weight_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_uint  )
memcached_server_add_with_weight = memcached_server_add_with_weight_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_server_add_with_weight(memcached_st * ptr, char const * hostname, unsigned int port, uint32_t weight) [free function]"], libmemcached_lib ) )

memcached_add_by_key_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_add_by_key = memcached_add_by_key_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_add_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

memcached_server_add_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint  )
memcached_server_add = memcached_server_add_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_server_add(memcached_st * ptr, char const * hostname, unsigned int port) [free function]"], libmemcached_lib ) )

memcached_servers_parse_type = ctypes.CFUNCTYPE( ctypes.POINTER( memcached_server_st ), ctypes.c_char_p  )
memcached_servers_parse = memcached_servers_parse_type( ( libmemcached_lib.undecorated_names["extern memcached_server_st * memcached_servers_parse(char const * server_strings) [free function]"], libmemcached_lib ) )

memcached_string_free_type = ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_string_st )  )
memcached_string_free = memcached_string_free_type( ( libmemcached_lib.undecorated_names["extern void memcached_string_free(memcached_string_st * string) [free function]"], libmemcached_lib ) )

memcached_server_add_udp_with_weight_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_uint  )
memcached_server_add_udp_with_weight = memcached_server_add_udp_with_weight_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_server_add_udp_with_weight(memcached_st * ptr, char const * hostname, unsigned int port, uint32_t weight) [free function]"], libmemcached_lib ) )

memcached_callback_set_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), memcached_callback, ctypes.c_void_p  )
memcached_callback_set = memcached_callback_set_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_callback_set(memcached_st * ptr, memcached_callback flag, void * data) [free function]"], libmemcached_lib ) )

memcached_append_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_append = memcached_append_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_append(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

memcached_decrement_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_uint, ctypes.POINTER( ctypes.c_ulonglong )  )
memcached_decrement = memcached_decrement_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_decrement(memcached_st * ptr, char const * key, size_t key_length, uint32_t offset, uint64_t * value) [free function]"], libmemcached_lib ) )

memcached_server_remove_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_server_st )  )
memcached_server_remove = memcached_server_remove_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_server_remove(memcached_server_st * st_ptr) [free function]"], libmemcached_lib ) )

memcached_callback_get_type = ctypes.CFUNCTYPE( ctypes.c_void_p, ctypes.POINTER( memcached_st ), memcached_callback, ctypes.POINTER( memcached_return )  )
memcached_callback_get = memcached_callback_get_type( ( libmemcached_lib.undecorated_names["extern void * memcached_callback_get(memcached_st * ptr, memcached_callback flag, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_result_set_value_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_result_st ), ctypes.c_char_p, ctypes.c_uint  )
memcached_result_set_value = memcached_result_set_value_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_result_set_value(memcached_result_st * ptr, char * value, size_t length) [free function]"], libmemcached_lib ) )

memcached_server_push_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_server_st )  )
memcached_server_push = memcached_server_push_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_server_push(memcached_st * ptr, memcached_server_st * list) [free function]"], libmemcached_lib ) )

memcached_server_list_count_type = ctypes.CFUNCTYPE( ctypes.c_uint, ctypes.POINTER( memcached_server_st )  )
memcached_server_list_count = memcached_server_list_count_type( ( libmemcached_lib.undecorated_names["extern unsigned int memcached_server_list_count(memcached_server_st * ptr) [free function]"], libmemcached_lib ) )

memcached_increment_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_uint, ctypes.POINTER( ctypes.c_ulonglong )  )
memcached_increment = memcached_increment_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_increment(memcached_st * ptr, char const * key, size_t key_length, uint32_t offset, uint64_t * value) [free function]"], libmemcached_lib ) )

memcached_free_type = ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_st )  )
memcached_free = memcached_free_type( ( libmemcached_lib.undecorated_names["extern void memcached_free(memcached_st * ptr) [free function]"], libmemcached_lib ) )

memcached_replace_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_replace = memcached_replace_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_replace(memcached_st * ptr, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

memcached_append_by_key_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_char_p, ctypes.c_uint, ctypes.c_long, ctypes.c_uint  )
memcached_append_by_key = memcached_append_by_key_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_append_by_key(memcached_st * ptr, char const * master_key, size_t master_key_length, char const * key, size_t key_length, char const * value, size_t value_length, time_t expiration, uint32_t flags) [free function]"], libmemcached_lib ) )

memcached_server_add_unix_socket_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_st ), ctypes.c_char_p  )
memcached_server_add_unix_socket = memcached_server_add_unix_socket_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_server_add_unix_socket(memcached_st * ptr, char const * filename) [free function]"], libmemcached_lib ) )

memcached_stat_free_type = ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_stat_st )  )
memcached_stat_free = memcached_stat_free_type( ( libmemcached_lib.undecorated_names["extern void memcached_stat_free(memcached_st * arg0, memcached_stat_st * arg1) [free function]"], libmemcached_lib ) )

memcached_string_check_type = ctypes.CFUNCTYPE( memcached_return, ctypes.POINTER( memcached_string_st ), ctypes.c_uint  )
memcached_string_check = memcached_string_check_type( ( libmemcached_lib.undecorated_names["extern memcached_return memcached_string_check(memcached_string_st * string, size_t need) [free function]"], libmemcached_lib ) )

memcached_stat_get_keys_type = ctypes.CFUNCTYPE( ctypes.POINTER( ctypes.c_char_p ), ctypes.POINTER( memcached_st ), ctypes.POINTER( memcached_stat_st ), ctypes.POINTER( memcached_return )  )
memcached_stat_get_keys = memcached_stat_get_keys_type( ( libmemcached_lib.undecorated_names["extern char * * memcached_stat_get_keys(memcached_st * ptr, memcached_stat_st * stat, memcached_return * error) [free function]"], libmemcached_lib ) )

memcached_result_free_type = ctypes.CFUNCTYPE( None, ctypes.POINTER( memcached_result_st )  )
memcached_result_free = memcached_result_free_type( ( libmemcached_lib.undecorated_names["extern void memcached_result_free(memcached_result_st * result) [free function]"], libmemcached_lib ) )
