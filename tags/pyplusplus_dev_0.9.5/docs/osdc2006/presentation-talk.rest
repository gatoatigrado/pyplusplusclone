===================
C++ Python bindings
===================

.. contents:: Table of contents
 

------------------
C++ Python binding
------------------

* It is cool. Really! In most cases it takes your application\library to places 
  you did not even think about them. For example: PyQt\PyKDE\wxPython.
  
* Effective reuse of existing code\projects. The best example for this item is
  Python itself. You can create Python modules in C using Python C API. More over,
  there are a lot of functionalities, provided by Python, which are written in 
  C/C++. Python is used as a glue language. 
  
* To fulfill different requirements     
    * execution speed 
    * development speed ( == time to market )
    * easy on-site customization

  I think, that the best way to explain this item is to show a project\\product 
  evolution. When a project just starts - development speed is critical. If you 
  cannot do a simple prototype or partly working version in few months with 5-6
  people - you have problems. Python is very handy at this stage. It's development 
  speed is amazing. Next stage is fulfilling customer's requirements: your product
  should do that job fast. No problem sir! Using Python built-in profiler you 
  can find out problematic execution paths and re-write that piece of code using
  C\C++. After this, using Boost.Python you can bind between C\C++ code and 
  Python. Speed has been achieved. You have a happy customer. Almost every 
  customer has some unique requirements. You cannot and do not want to fulfill 
  all of them. The best way is to provide a client with a set of tools that will 
  allow him to customize your product. I do not know an easier and better way, 
  then allowing a customer to use Python SDK. 

  
------------------------
C++ Python binding tools
------------------------

Python interpreter is written in C. This fact makes possible to create new 
modules written in C/C++. This process is called extending. There is an opposite 
process called embedding - implementing some of the functionality of an 
application in Python. There are few projects, which could help us with 
extending and embedding Python. Most of the extending or embedding process can
be automated. 

Code generators:

 * SWIG - Simplified Wrapper and Interface Generator. SWIG is a software 
   development tool, that connects programs written in C and C++ with a variety 
   of high-level programming languages.
   ( wxWidgets, wxPython ) ( extending only )
 * SIP - PyQt, PyKDE ( extending only )
 * Robin - ?
 * Py++ - an object-oriented framework for creating a code generator for 
   Boost.Python library. ( TnFOX, boost.date_time )
 
Libraries: 
 
 * Boost.Python - a C++ library, which enables seamless interoperability between 
   C++ and the Python programming language. It allows you to expose C++ classes 
   functions and objects to Python, and vice-versa, using no special tools - 
   just your C++ compiler. It is designed to wrap C++ interfaces non-intrusively, 
   so that you will not have to change the C++ code at all in order to wrap it, 
   making Boost.Python ideal for exposing 3rd-party libraries to Python. 
   The library's use of advanced meta programming techniques simplifies its 
   syntax for users, so that wrapping code takes on the look of a kind of 
   declarative interface definition language (IDL). 

   Examples:
   * boost.graph
   * boost.date_time
   * TnFOX
 
 * PyCXX - provides convenient wrappers for Python API. Most of functionality
   of this project can be found in Boost.Python.

--------------------------
Boost.Python features list
--------------------------

Here is an incomplete list of Boost.Python features:

* classes, even abstract ones

* pointers and references

* functions
  
  * free
  
  * members
  
  * overloading
  
  * default arguments
  
  * keyword arguments
  
  * overriding virtual function
  
  * static methods 

* small subset of stl:
  
  * std::string
  
  * std::wstring
  
  * std::map
  
  * std::vector
  
  * C++ iterators as Python iterators   

* enumeration

* documentation string

* pickle is supported

* variables

  * global variables
  
  * member variables
    
    There are few ways you can expose member variables to Python
  
    * as properties
    
    * as class variables
    
    * get\\set functions created by Boost.Python

* C++ to Python exception translation

* ...

-------------------------
Example - class ``world``
-------------------------

Class ``world``, may be does not represent a typical class you have in your 
project, but it is good enough to show main concepts and to give you the 
"filling" of the library.

-----------------------------------
Boost.Python example: world exposed
-----------------------------------

From this point my presentation is going to be more interactive. First of all I 
am going to ask developers, whether they understand the code or not. Second, I 
will explain what is:

* *BOOST_PYTHON_MODULE*
  macro, which handles Python module initialization.

* *class_*
  interface, through which, users expose their C++ classes to Python

* *init*
  interface, through which, users expose C++ constructors to Python as extension 
  class __init__ functions

* *def*
  def is the function, which can be used to expose C++ functions and callable 
  objects as Python functions

* call policies
  There is a good introduction about call policies within Boost.Python tutorials.
  There is a big difference between C++ and Python when it comes to resource 
  management. Memory management in C++ is done explicitly, while in Python, it is 
  done by interpreter and developer has no control on it.
  Consider next example: 

.. parsed-literal::

  ::
    struct Y{
      X x; 
      Z\* z;
      int z_value() { return z->value(); }
    };

    X& f(Y& y, Z* z){
      y.z = z;
      return y.x;
    }

    >>> x = f(y, z) # y refers to z
    >>> del z       # Kill the z object
    >>> y.z_value()

    def("f", f, return_internal_reference<1,with_custodian_and_ward<1, 2> >());

This process can be automated. There are few points that can\\shell be
customized by developer. Lets see the code, which had been automatically 
generated by pyplusplus.

--------------
Python session
--------------

Self explained, is not it?

-----------------------------------
Automatically exposed class "world"
-----------------------------------

There are few differences between hand written code and generated one.
1. arg - allows to call an exposed function using keyword arguments
  
.. parsed-literal::
  
   x = hello.world()
   x.set( msg="Python is better" )

2. call policies.
   Even a constructor has call policies. More over Boost.Python provides 
   functionality to create custom call policies. And this is not all. You can 
   combine different built-in call policies.

Overall, automaticly generated code is a little bit noisy, than hand-written one. 

-----------------------
pyplusplus introduction
-----------------------

It is time to provide a formal definition of pyplusplus and it's goals.
I think, that I shell point your attention, that pyplusplus is not ready to run 
code generator, but rather a framework for creation custom code generator.

Goals explanation:

* *A developer must be able to apply all changes before a code is generated*
  If you ever use code generators, then you know that after a code has been 
  generated you have to modify the generated code. The main reason, for it is 
  that, code generator is just a program that deals with a finite number of cases 
  and your case is not one of them. From now you have few choices:
  1. To use code generator for the first code generation and to drop it.
  2. To write an other program, that will modify the generated code.
  3. To modify a code generator.

  pyplusplus solves this issue. It allows a developer to change any piece of 
  code before it has been generated.
  
* *A developer must be able to work on whole project\library at once*
  The idea is taken from an "aspect oriented programming".
  Few facts about big C++ projects:
  1. Every project\\developer has code guidelines.
  2. Every project is devided to files\\directories. 
  3. C++ projects make an extensive use of namespaces. 

  A code generator must reuse all this information, otherwise development and 
  support efforts of an extension will be expensive. 
  For example: I work with classes that defines [un]serialize functions to\from
  XML using Xercesc library. Using pyplusplus is very easy to eliminate those
  functions from being exposed to Python. An other example is "details" or "impl"
  namespaces. In most cases you do not want to expose functionality founded in 
  that namespaces. 

------------------------
pyplusplus features list
------------------------

pyplusplus supports a lot of features of Boost.Python library. But this is not 
important, because it takes only few hours to add a new functionality to 
pyplusplus. 

1. The goals has been achieved. After exposing few 3rd party libraries I can say
   this.

2. C++ parser independence. Why is this important at all? C++ is a very complex 
   language. This is not an easy task to write parser for C++. More over, 
   perfectly correct code, that compiles with an compiler can not be compiled
   with an other one. Right now pyplusplus works with GCC-XML C++ parser. 

3. pyplusplus has small and intuitive GUI. It allows you to:
   * evalutate pyplusplus
   * create Python bindings for trivial use cases
   * create pyplusplus code - the best way to start with pyplusplus

4. As I have already said: you can modify almost any piece of generated code, 
   before it is actually generated. 

5. Scalability. pyplusplus works well on small and big projects. pyplusplus
   learning curve can be described by the following chart:

   ::
     
     3.5 ^ time(days)
     3.0 |                                                  
     2.5 |                             /--------------->    
     2.0 |                            / advanced usage      
     1.5 |   /-----------------------/                      
     1.0 |  / start using pyplusplus                        
     0.5 | /                                      usage
     0.0 @--------------------------------------------->

    This curve will be changed. Right now I am writing a documentation to the 
    project.

6. Multiple files - for big and complexed projects it is must to have feature. 
   pyplusplus is able to split generated code to files. This feature saves a
   lot of compilation time.

-----------------
pyplusplus design
-----------------

pyplusplus introduces few concepts, that a user should understand in order to 
work with it:

1. Code creators package. The only responsibility of classes in this package is 
   to create a code. Those classes do not care where the code is going to be 
   written, neither they care about the order of generated code.
    
2. Module creator package. This is code a creators factory. Classes in this 
   package analyze C++ declarations and creates relevant code creators.

3. File writers package. This package contains classes that write generated code 
   to file(s).
   
4. A code repository package. This is relatively a new package. It is going to be 
   a repository of "ready to run" solutions for different situations. 

------------------------------
pyplusplus development process
------------------------------

* Main guidline: the highest quality of generated code. In my opinion, generated code
  shell look like it was created by a very decsipline person. Developer is going 
  to read\support generated code. 
  
* Agile software development process. In my work I have used test driven 
  development model. Development is primary done on Linux platform, but I run 
  tests also on Windows.

* 3\'rd party projects are used in test procedure:
    * boost.date_time    

      boost is a repository of free peer-reviewed portable C++ source libraries.      
      
      date_time is a cross-platform and open source C++ library designed to 
      provide a basis for performing an efficient time calculations. 
      
    * EasyBMP
    
      EasyBMP is a simple, cross-platform, open source (LGPL) C++ library 
      designed for an easy reading, writing, and modifying Windows bitmap (BMP) 
      image files.

    * Qt.Xml

      Qt by Trolltech is a C++ toolkit for a cross-platform GUI application 
      development. Qt provides single-source portability across Microsoft 
      Windows, Mac OS X, Linux, and all major commercial Unix variants.

      Qt.Xml module provides a well-formed XML parser using the SAX2 
      (Simple API for XML) interface plus an implementation of the DOM Level 2 
      (Document Object Model)
    
    * TnFOX
    
       TnFOX is a modern secure, robust, multithreaded, exception aware, 
       internationalisable, portable GUI toolkit library designed for 
       mission-critical work in C++ and Python forked from the FOX library.

--------
Pitfalls
--------

Boost.Python uses advanced metaprogramming techniques that simplifies its syntax 
for users, so that wrapping a code takes on the look of a kind of declarative 
interface definition language (IDL). But this approach has price - compilation
time. For really big projects you need compilation farm.

pyplusplus does not good documentation. This is temporal. I am working on this
issue. Do not forget to check web site in few months.


----------
Conclusion
----------

When I have decided to give this presentation I had two goals in my mind. First 
goal was to introduce to the developers a Boost.Python and pyplusplus. I wanted 
that developers will consider using of these tools for thier next projects. 
Second goal was a little bit different. During my presentation I have shown that 
multi-language development plus code generation are very powerfull tools.


